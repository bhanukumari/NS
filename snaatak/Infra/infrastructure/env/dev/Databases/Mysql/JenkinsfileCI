@Library(['javahome_demo@feature']) _
pipeline {
    agent any
    stages {
        stage('read variable'){
            steps{
                dir ('env/dev/Databases/Mysql'){
            script{
                // checkout scm
                propsValue = tfsharedlibrary.properties("test.properties")
                    }
                }
            }
        }

        stage('clone')  {
            steps {
                script{
            tfsharedlibrary.clone("${propsValue.git_repo}","${propsValue.branch}","${propsValue.git_token}")
                }
            }
        }

        stage('Cred Scanning') {
            steps {   
                script {
                try {
                        commonsharedlibrary.Gitleaks()
          } catch (Exception e) {
            echo "An error occurred: ${e.getMessage()}"
                    }
                } 
            }
        }

        stage('Terraform Init') {
            steps { 
                dir ('env/dev/Databases/Mysql'){
                script {
                    
                tfsharedlibrary.terraform('init')
                    }
                } 
            }
        }



        stage('Validation & Security Scanning') {
        parallel {

            stage('Terraform Validate') {
            steps {
                dir ('env/dev/Databases/Mysql'){
                script {    
                tfsharedlibrary.terraform('validate')
                    }
                }
            }
        }
        
        stage('Security/Compliance') {
            steps {   
                script {
                try {
                        tfsharedlibrary.security("env/dev/Databases/Mysql")
          } catch (Exception e) {
            echo "An error occurred: ${e.getMessage()}"
                    }
                } 
            }
        }
        stage('Static Code Analysis') {
            steps {  
                script {
                    dir ('env/dev/Databases/Mysql'){
                try {
                        tfsharedlibrary.linting(allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportFiles: "tflint_report.json", reportName: "TFLint Report")
          } catch (Exception e) {
            echo "An error occurred: ${e.getMessage()}"
                                }
                            }
                        }
                    }
                }           
            }
        }

        stage('Infra Cost') {
      steps {  
        withCredentials([string(credentialsId: 'infracost-frontend', variable: 'INFRACOST_API_KEY')]){  
          dir ('env/dev/Databases/Mysql') {
            sh """
                #!/bin/bash 
                ls -al
                rm -rf .infracost infracost_report.html
              """
            script {
                tfsharedlibrary.infracost(allowMissing: false, alwaysLinkToLastBuild: false, reportFiles: "infracost_report.html", reportName: "Infracost Report")
            }
            sh """
                #!/bin/bash 
                if [ -z "$INFRACOST_API_KEY" ]
                then
                    echo "\$INFRACOST_API_KEY is empty"
                else
                    echo "\$INFRACOST_API_KEY is NOT empty"
                fi
                echo "Location"
                ls -al 
              """
          }
        }
      }
    }
        stage('Plan') {
                steps {    
                    dir ('env/dev/Databases/Mysql'){
                    script {
                        tfsharedlibrary.terraform('plan')
                        }
                    }
                }
            }

            stage('archive') {
            steps {
                archiveArtifacts artifacts: '**/*.*', followSymlinks: false
            }
            }
        
               stage('Trigger Another Pipeline') {
                   steps {
                     input 'do you want to apply this plan'
                     build job: 'OT-Microservices-Infra/databases/dev/mysql/mysql-TF-CD', wait: false
    
                 }
              }

            
    }

    post {
    always {
    //   junit 'env/dev/Applications/Frontend/results_junitxml.xml'
      slackSend channel: 'slack-ot-avengers-p2', color: currentBuild.currentResult == 'SUCCESS' ? 'good' : 'danger', message: "Build Number: ${env.BUILD_NUMBER} \n Job Name: ${env.JOB_NAME} \n Build URL: ${env.BUILD_URL} \n Status: ${currentBuild.currentResult} \n User: ${env.USER}"        
    }
  }
}